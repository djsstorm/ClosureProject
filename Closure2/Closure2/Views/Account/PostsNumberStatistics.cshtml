@model IEnumerable<Closure2.Models.PostsStatistics>
<h2>Post number statistic</h2>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
<style>
.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.bar {
  fill: orange;
}

.bar:hover {
  fill: orangered ;
}

.x.axis path {
  display: none;
}

.d3-tip {
  font-weight: bold;
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  border-radius: 2px;
}

/* Creates a small triangle extender for the tooltip */
.d3-tip:after {
  box-sizing: inherit;
  display: inherit;
  font-size: 10px;
  width: 100%;
  line-height: 1;
  color: rgba(0, 0, 0, 0.8);
  content: "\25BC";
  position: absolute;
  text-align: center;
}

/* Style northward tooltips differently */
.d3-tip.n:after {
  margin: -1px 0 0 0;
  top: 0%;
  left: 0;
}
</style>

<script>

    var margin = { top: 40, right: 20, bottom: 30, left: 40 },
   width = 860 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

   

    var formatPercent = d3.format(".0%");

    var x = d3.scale.ordinal()
        .rangeRoundBands([0, width], .1);

    var y = d3.scale.linear()
        .range([height, 0]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        .tickFormat(formatPercent);

    var tip = d3.tip()
      .attr('class', 'd3-tip')
      .offset([-10, 0])
      .html(function (d) {
          return "<strong>Number Of Posts:</strong> <span style='color:red'>" + d.NumberOfPosts + "</span>";
      })

    var svg = d3.select("div").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.call(tip);

    //d3.tsv("data.tsv", type, function (error, data) {
    (function () {
        var data = [];
        @foreach (var item in Model)
        {
            <text>
            data.push({ "Date": '@item.dateOfPost', "NumberOfPosts": '@item.numberOfPosts' });
            </text>
        }

        x.domain(data.map(function (d) { return d.Date; }));
        y.domain([0, d3.max(data, function (d) { return d.NumberOfPosts; })]);

        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
          .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("NumberOfPosts");

        svg.selectAll(".bar")
            .data(data)
          .enter().append("rect")
            .attr("class", "bar")
            .attr("x", function (d) { return x(d.Date); })
            .attr("width", x.rangeBand())
            .attr("y", function (d) { return y(d.NumberOfPosts); })
            .attr("height", function (d) { return height - y(d.NumberOfPosts); })
            .on('mouseover', tip.show)
            .on('mouseout', tip.hide)

    })();

    function type(d) {
        d.NumberOfPosts = +d.NumberOfPosts;
        return d;
    }

</script>